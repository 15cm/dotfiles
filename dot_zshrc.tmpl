# zmodload zsh/zprof
# _____________________ profiling _____________________


# ---------------------Essentials---------------------
# Fix for emacs tramp mode
[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return

export ZPLUG_HOME=$HOME/.zplug

# Disable Ctrl-s which freezes the terminal
stty -ixon

# Required for history related plugin like zsh-autosuggestions, fzf to work.
export HISTFILE=~/.zsh_history
export HISTSIZE=1000000000
export SAVEHIST=1000000000

# _____________________Essentials_____________________

# --------------------- Helpers ---------------------
sys_name=$(uname -s)

# Lazy Load to speed up zsh start
# Authors:
#   xcv58 <i@xcv58.com>
# Source:
#   https://github.com/xcv58/prezto/blob/master/modules/lazy-load/init.zsh

function lazy_load() {
  local load_func=${1}
  local lazy_func="lazy_${load_func}"

  shift
  for i in ${@}; do
    alias ${i}="${lazy_func} ${i}"
  done

  eval "
    function ${lazy_func}() {
        unset -f ${lazy_func}
        lazy_load_clean $@
        eval ${load_func}
        unset -f ${load_func}
        eval \$@
    }
    "
}

function lazy_load_clean() {
  for i in ${@}; do
    unalias ${i}
  done
}

# _____________________ Functions _____________________

# --------------------- ENV ---------------------
export EDITOR=$HOME/.config/scripts/misc/exec-editor.sh

# GPG Fix
export GPG_TTY=$(tty)

# tldr color for light/dark themes
export TLDR_COLOR_BLANK="blue"
export TLDR_COLOR_DESCRIPTION="green"
export TLDR_COLOR_PARAMETER="blue"

# <tab> selection color
zstyle ':completion:*' menu select
# _____________________ ENV _____________________

# --------------------- Plugins ---------------------
source ${ZPLUG_HOME}/init.zsh

zplug "zsh-users/zsh-completions",              defer:0
zplug "zsh-users/zsh-autosuggestions",          defer:2, on:"zsh-users/zsh-completions"
zplug "zsh-users/zsh-syntax-highlighting",      defer:3, on:"zsh-users/zsh-autosuggestions"
zplug "mollifier/cd-gitroot"
zplug "15cm/yadm-zsh"
zplug "15cm/zce.zsh"
zplug "plugins/fzf", from:oh-my-zsh

# Auto suggestions
export ZSH_AUTOSUGGEST_USE_ASYNC=true
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#a8a8a8,underline"
# _____________________ Plugins _____________________

# --------------------- Completions ---------------------
fpath+=$HOME/.zfunc
# _____________________ Completions _____________________

# --------------------- Key map ---------------------
export KEYTIMEOUT=5

# Fix backspace behavior after switching back from command mode
# https://unix.stackexchange.com/questions/290392/backspace-in-zsh-stuck
bindkey -v '^?' backward-delete-char

# Updates editor information when the keymap changes.
function zle-keymap-select() {
  zle reset-prompt
  zle -R
}
zle -N zle-keymap-select

# Ensure that the prompt is redrawn when the terminal size changes.
TRAPWINCH() {
  zle &&  zle -R
}

bindkey -v
autoload -Uz edit-command-line
bindkey -a '^[v' edit-command-line # equivalent to 'bindkey -M vicmd'
bindkey '^[v' edit-command-line

bindkey '^p' up-history
bindkey '^n' down-history

bindkey '^h' backward-delete-char
bindkey '^d' delete-char
bindkey '^b' backward-char
bindkey '^f' forward-char
bindkey '^o' forward-word
bindkey '^k' kill-line
bindkey '^a' beginning-of-line
bindkey '^e' end-of-line


# zle functions
# select quoted
autoload -U select-quoted
zle -N select-quoted
for m in visual viopp; do
	for c in {a,i}{\',\",\`}; do
	  bindkey -M $m $c select-quoted
	done
done

# select bracketed
autoload -U select-bracketed
zle -N select-bracketed
for m in visual viopp; do
	for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
	  bindkey -M $m $c select-bracketed
	done
done

# surround
autoload -Uz surround
zle -N delete-surround surround
zle -N add-surround surround
zle -N change-surround surround
bindkey -a cs change-surround
bindkey -a ds delete-surround
bindkey -a ys add-surround
bindkey -a S add-surround

# zce
bindkey -M vicmd 't' zce

# ranger
# Automatically change the directory in zsh after closing ranger
ranger-cd() {
  tempfile="$(mktemp -t tmp.XXXXXX)"
  ranger --choosedir="$tempfile" "${@:-$(pwd)}"
  test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
      cd -- "$(cat "$tempfile")"
    fi
  rm -f -- "$tempfile"
}

bindkey -s '^u' 'ranger .^m'
bindkey -s '^[u' 'ranger-cd^m'

# _____________________ Key map _____________________

# --------------------- Version Management ---------------------

# pyenv
if which pyenv > /dev/null; then eval "$(pyenv init - --no-rehash)"; fi

# pyenv-virtualenv
if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi

# nodenv(lazy load)
function load_nodenv() {
  which nodenv > /dev/null && eval "$(nodenv init -)"
}

lazy_load load_nodenv nodenv npm node hexo

# jenv(lazy load)
function load_jenv() {
  if which jenv > /dev/null; then eval "$(jenv init -)"; fi
}

lazy_load load_jenv jenv java javac

# rbenv
function load_rbenv() {
  if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi
}

lazy_load load_rbenv rbenv ruby gem pry t

# direnv
if which direnv > /dev/null; then eval "$(direnv hook zsh)"; fi
# _____________________ Version Management _____________________

# --------------------- exa ---------------------
if which exa > /dev/null; then
  _ls_cmd="exa --color always --group-directories-first --sort extension"
  alias ls="$_ls_cmd"
  alias la="$_ls_cmd -al --git --group --header"
  alias ll="$_ls_cmd -l --git --group --header"
  alias l="$_ls_cmd -l --git"
  alias tree="$_ls_cmd --tree --level 2 -l --git"
  alias tree2="$_ls_cmd --tree"
  _tree_cmd="$_ls_cmd --tree --level 2"
else
  _ls_cmd="ls --color=tty --group-directories-first"
  alias ls="$_ls_cmd"
  alias ll="$_ls_cmd -lh"
  alias l="$_ls_cmd -lh"
  alias la="$_ls_cmd -lAh"
  _tree_cmd="tree -C"
fi
# _____________________ exa _____________________

# --------------------- z ---------------------
export _Z_DATA="$HOME/.z/.z"
. ~/.z/z.sh
# _____________________ z _____________________

# Navi
if which navi > /dev/null; then
  eval "$(navi widget zsh)"
  bindkey '^y' _navi_widget
fi

# --------------------- fzf ---------------------
for _sh_path in ~/.fzf.zsh /usr/share/fzf/key-bindings.zsh /usr/share/fzf/completion.zsh /usr/share/doc/fzf/key-bindings.zsh /usr/share/doc/fzf/completion.zsh; do
  [ -f "$_sh_path" ] && source "$_sh_path"
done

_gen_fzf_default_opts() {
  local base03="234"
  local base02="235"
  local base01="240"
  local base00="241"
  local base0="244"
  local base1="245"
  local base2="252"
  local base3="230"
  local yellow="136"
  local orange="166"
  local red="160"
  local magenta="125"
  local violet="61"
  local blue="33"
  local cyan="39"
  local green="64"

  # Solarized color scheme for fzf
  local FZF_COLOR_OPTS="--color fg:-1,bg:-1,hl:$magenta,fg+:$base02,bg+:$base2,hl+:$cyan
   --color info:$yellow,prompt:$yellow,pointer:$base3,marker:$base3,spinner:$yellow"
  export FZF_DEFAULT_OPTS="${FZF_COLOR_OPTS} --height 40% -m --reverse --bind 'ctrl-d:page-down,ctrl-u:page-up,ctrl-k:kill-line,pgup:preview-page-up,pgdn:preview-page-down,alt-a:toggle-all'"
}
_gen_fzf_default_opts

FD_DEFAULT_COMMAND="fd -H --no-ignore-vcs"
export FZF_TMUX=0
export FZF_DEFAULT_COMMAND="$FD_DEFAULT_COMMAND"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND -t d"

export FZF_CTRL_T_OPTS="--preview '(([ -f {} ] && (highlight -O ansi -l {} 2> /dev/null || cat {})) || ([ -d {} ] && $_tree_cmd {} )) | head -200'"
export FZF_CTRL_R_OPT=" --exact --preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"
export FZF_ALT_C_OPTS="--preview '$_tree_cmd {} | head -200'"
export FZF_COMPLETION_OPTS=$FZF_CTRL_T_OPTS

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd -H --no-ignore-vcs -t d $1
}

# fzf z binding
__fzf_z() {
  z -l | sed 's/^[0-9,.]* *//' \
    | fzf --tac --reverse --preview "$_tree_cmd {} | head -200" --preview-window right:30%
}

__fzf_z_arg() {
  __fzf_z | while read item; do printf ' %q/' "$item"; done
  echo
}

__fzf_z_arg_widget() {
  LBUFFER="${LBUFFER}$(__fzf_z_arg)"
  local ret=$?
  zle redisplay
  typeset -f zle-line-init >/dev/null && zle zle-line-init
  return $ret
}

zle -N __fzf_z_arg_widget

# fzf z arg
bindkey '^[j' __fzf_z_arg_widget

__fzf_z_cd_widget() {
  local dir=$(__fzf_z)
  cd "$dir"
  local ret=$?
  zle reset-prompt
  typeset -f zle-line-init >/dev/null && zle zle-line-init
  return $ret
}

zle -N __fzf_z_cd_widget

# fzf z cd
bindkey '^j' __fzf_z_cd_widget

# fzf dirs under current dir
__fzf_dir() {
  set -o nonomatch
  _fzf_compgen_dir . \
    | fzf --tac --reverse --preview "$_tree_cmd {} | head -200" \
    | while read item; do printf ' %q/' "$item"; done
  echo
}

__fzf_dir_widget() {
  LBUFFER="${LBUFFER}$(__fzf_dir)"
  local ret=$?
  zle redisplay
  typeset -f zle-line-init >/dev/null && zle zle-line-init
  return $ret
}

zle -N __fzf_dir_widget

bindkey '^x' fzf-cd-widget
# alt-t
bindkey '^[x' __fzf_dir_widget

export FZF_COMPLETION_TRIGGER=':'
# _____________________ fzf _____________________

# --------------------- Config for different OS ---------------------
if [[ $sys_name = "Darwin" ]]; then
  source $HOME/.zshrc.mac
else
  source $HOME/.zshrc.linux
fi

# _____________________ Config for different OS _____________________

# --------------------- Powerline ---------------------
. $HOME/.config/powerline/bindings/zsh/powerline.zsh
# _____________________ Powerline _____________________

# --------------------- Common Alias ---------------------
alias stl="set-theme.sh light"
alias std="set-theme.sh dark"
alias rz='exec $SHELL'
alias vi="vim"
alias gcmsg!="git commit -m 'just a commit'"
alias ew="emacsclient -s ~/local/run/emacs/misc -t -a vim"
alias more="more -R"
alias ccat="ccat -C always"
alias cdg="cd-gitroot"
alias prl="parallel"
alias grep="grep --color=auto"
alias rp="realpath"
# Allows alias after sudo. If the last character of the alias value is a space
# or tab character, then the next command word following the alias is also
# checked for alias expansion.
# http://www.gnu.org/software/bash/manual/bashref.html#Aliases
alias sudo="sudo "
alias _="sudo"

# Leetcode
alias lc="leetcode"
alias lcsh="leetcode show"
alias lcsb="leetcode submit"
alias lct="leetcode test"
alias lcl="leetcode list"

# Tmux

alias ta='tmux attach -t'
alias tad='tmux attach -d -t'
alias ts='tmux new-session -s'
alias tl='tmux list-sessions'
alias tksv='tmux kill-server'
alias tkss='tmux kill-session -t'

# Chezmoi
alias c='chezmoi'
alias ca='chezmoi add'
alias ce='chezmoi edit'
alias cg='chezmoi git'
alias cga='chezmoi git add'
alias cgst='chezmoi git status'
alias cgc='chezmoi git commit'
alias cgp='chezmoi git push'
alias cgl='chezmoi git pull'

# SSH
alias sshfs='sshfs -o reconnect,ServerAliveInterval=15,ServerAliveCountMax=3' # Prevent sshfs freeze the OS

# _____________________ Common Alias _____________________

# zplug check returns true if all packages are installed
# Therefore, when it returns false, run zplug install
if ! zplug check; then
  zplug install
fi

# source plugins and add commands to the PATH
zplug load
# --------------------- profiling ---------------------
# zprof
